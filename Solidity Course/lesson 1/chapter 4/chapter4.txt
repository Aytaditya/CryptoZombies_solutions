         
         Three type of modifiers 

1. 
  private means it's only callable from other functions inside the contract;

  internal is like private but can also be called by contracts that inherit from this one;

  external can only be called outside the contract

  and finally public can be called anywhere, both internally and externally.

2. We also have state modifiers, which tell us how the function interacts with the BlockChain: view tells us that by running the function, no data will be saved/changed. pure tells us that not only does the function not save any data to the blockchain, but it also doesn't read any data from the blockchain. Both of these don't cost any gas to call if they're called externally from outside the contract

3. Then we have custom modifiers

4. Note: If a function is not marked payable and you try to send Ether to it as above, the function will reject your transaction.

5. It is important to note that you cannot transfer Ether to an address unless that address is of type address payable


6. The best source of randomness we have in Solidity is the keccak256 hash function.
We could do something like the following to generate a random number:

// Generate a random number between 1 and 100:
uint randNonce = 0;
uint random = uint(keccak256(abi.encodePacked(now, msg.sender, randNonce))) % 100;
randNonce++;
uint random2 = uint(keccak256(abi.encodePacked(now, msg.sender, randNonce))) % 100;

    explanation=>What this would do is take the timestamp of now, the msg.sender, and an incrementing nonce (a number that is only ever used once, so we don't run the same hash function with the same input parameters twice).
    It would then "pack" the inputs and use keccak to convert them to a random hash. Next, it would convert that hash to a uint, and then use % 100 to take only the last 2 digits. This will give us a totally random number between 0 and 99.

    